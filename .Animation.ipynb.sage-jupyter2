{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":84582400},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1574724114211,"exec_count":1,"id":"94471a","input":"%config InlineBackend.figure_format = 'svg'\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nimport matplotlib\nfrom IPython.display import HTML\nfrom matplotlib.animation import FuncAnimation as Animate","kernel":"python3","pos":1,"start":1574724113357,"state":"done","type":"cell"}
{"cell_type":"code","end":1574724114240,"exec_count":2,"id":"29acc0","input":"class Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    @property\n    def asList(self):\n        return [self.x, self.y]","kernel":"python3","pos":2,"start":1574724114229,"state":"done","type":"cell"}
{"cell_type":"code","end":1574724114864,"exec_count":3,"id":"7a2abb","input":"class Box(object):\n    def __init__(self, \n                 pt=None,\n                 array=None):\n        \n        try:\n            self.array = np.array([pt[0].asList,\n                                   pt[1].asList,\n                                   pt[2].asList,\n                                   pt[3].asList,\n                                   pt[0].asList])\n        except TypeError:\n            self.array = array\n        except AttributeError:\n            self.array = array\n    \n    def rotate(self, theta):\n        # The following is the rotation matrix\n        R = np.array([[np.cos(theta), -np.sin(theta)],\n                      [np.sin(theta),  np.cos(theta)]])\n        # @ is matrix multiplication\n        rot = R @ self.array.T\n\n        # returns a NEW Box object.\n        # doesn't change the original box\n        return Box(array=rot.T)\n    \n    def deform(self, F):\n        deformedBox = F @ self.array.T\n        return Box(array=deformedBox.T)\n        \n    def plot(self):\n        ln1 = ax.plot(self.array[:,0], self.array[:,1],'k')\n        ln2 = ax.scatter(self.array[:,0], self.array[:,1],color='k')\n        return (ln1, ln2)\n    \n    @property\n    def xdata(self):\n        return self.array[:,0]\n    \n    @property\n    def ydata(self):\n        return self.array[:,1]\n    \n    @property\n    def data(self):\n        return (self.xdata, self.ydata)","kernel":"python3","pos":3,"start":1574724114851,"state":"done","type":"cell"}
{"cell_type":"code","end":1574724124262,"exec_count":4,"id":"60d4bd","input":"pt0 = Point(0, 0)\npt1 = Point(1, 0)\npt2 = Point(1, 1)\npt3 = Point(0, 1)\nbox0 = Box([pt0, pt1, pt2, pt3])\nF = np.array([[1.1,0.1],[0,1.1]])","kernel":"python3","pos":4,"start":1574724124252,"state":"done","type":"cell"}
{"cell_type":"code","end":1574724125764,"exec_count":5,"id":"80b81e","input":"fig, ax = plt.subplots()\n# plot original box\n\nbox0.plot()\nbox0.rotate(np.pi/4).plot()\n\nbox0.deform(F).plot()\nbox0.rotate(0).deform(F).plot()\n\nax.grid(True)\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_aspect('equal')\nprint(box0.plot())\n#for theta in np.linspace(0, 2*np.pi, 10):\n#    box0.rotate(theta).plot(ax)","kernel":"python3","output":{"0":{"name":"stdout","text":"([<matplotlib.lines.Line2D object at 0x7f58633c7b00>], <matplotlib.collections.PathCollection object at 0x7f5861377198>)\n"},"1":{"data":{"image/svg+xml":"a9fede58bfb2eb404198940ffed3eece24c8ec43","text/plain":"<Figure size 432x288 with 1 Axes>"}}},"pos":5,"start":1574724125250,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"f902b5","input":"fig, ax = plt.subplots()\nax.grid(True)\nax.set_aspect('equal','box')\nax.set_xlim([-2, 2])\nax.set_ylim([-2, 2])\n\nline1, = ax.plot([], [], 'k-o')\nline2, = ax.plot([], [], 'r-o')\n\ndef init():\n    xdata, ydata = box0.data\n    line1.set_data(xdata, ydata)\n    \n    xdata, ydata = box0.deform(F).data\n    line2.set_data(xdata, ydata)\n    return line1, line2\n\ndef update(frame):\n    xdata, ydata = box0.rotate(frame).data\n    line1.set_data(xdata, ydata)\n    \n    xdata, ydata = box0.rotate(frame).deform(F).data\n    line2.set_data(xdata, ydata)\n    return line1, line2\n\nnframes = 100\ntf = 5\ninterval = (tf*1000)/(nframes-1)\n\nframes = np.linspace(0, 2*np.pi, nframes)\n\n\nani = Animate(fig,\n              update,\n              init_func=init,\n              frames=frames,\n              interval=interval,\n              blit=True\n             )\n\nHTML(ani.to_jshtml())","output":{"0":{"more_output":true}},"pos":6,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"516a45","input":"%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\n\n#=========================================\n# Create Fake Images using Numpy \n# You don't need this in your code as you have your own imageList.\n# This is used as an example.\n\nimageList = []\nx = np.linspace(0, 2 * np.pi, 120)\ny = np.linspace(0, 2 * np.pi, 100).reshape(-1, 1)\nfor i in range(60):\n    x += np.pi / 15.\n    y += np.pi / 20.\n    imageList.append(np.sin(x) + np.cos(y))\n\n#=========================================\n# Animate Fake Images (in Jupyter)\n\ndef getImageFromList(x):\n    return imageList[x]","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"f88d1e","input":"fig = plt.figure(figsize=(5, 5))\nims = []\nfor i in range(len(imageList)):\n    im = plt.imshow(getImageFromList(i), animated=True)\n    ims.append([im])\n\nani = animation.ArtistAnimation(fig, ims, interval=50, blit=True, repeat_delay=1000)\nplt.close()\n\n# Show the animation\nHTML(ani.to_html5_video())\n\n#=========================================\n# Save animation as video (if required)\n# ani.save('dynamic_images.mp4')","output":{"0":{"more_output":true}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"3ff4c4","input":"HTML(ani.to_jshtml())","output":{"0":{"more_output":true}},"pos":10,"type":"cell"}
{"cell_type":"code","id":"24ad32","input":"","pos":11,"type":"cell"}
{"cell_type":"code","id":"71a641","input":"","pos":12,"type":"cell"}
{"cell_type":"code","id":"984c21","input":"","pos":7,"type":"cell"}
{"cell_type":"raw","id":"67d8eb","input":"title: Animation\nlayout: default","pos":0,"type":"cell"}
{"last_load":1574724102959,"type":"file"}